import math

import numpy as np

from banditpylib.bandits.ordinarymnlbandit import search_best_assortment
from .utils import OrdinaryMNLLearner


class ExplorationExploitation(OrdinaryMNLLearner):
  """Exploration-Exploitation policy :cite:`agrawal2019mnl`

  .. inheritance-diagram:: ExplorationExploitation
    :parts: 1
  """

  def __init__(self, pars):
    super().__init__(pars)

  @property
  def _name(self):
    return 'Exploration-Exploitation'

  def _learner_reset(self):
    self.__prod_num = self._bandit.prod_num
    self.__revenue = self._bandit.context
    self.__K = self._bandit.card_constraint

    self.__ell = 1
    self.__v_ucb = np.ones(self.__prod_num)
    self.__purchases = np.zeros(self.__prod_num)
    self.__T = np.zeros(self.__prod_num)
    self.__update_epoch = False
    _, best_assort = search_best_assortment(
        self.__v_ucb, self.__revenue, self.__K)
    self.__s_ell = best_assort

  def learner_step(self, context):
    if self.__update_epoch:
      _, best_assort = search_best_assortment(
          self.__v_ucb, self.__revenue, self.__K)
      self.__s_ell = best_assort
    return self.__s_ell

  def _learner_update(self, context, action, feedback):
    self.__purchases[feedback[1]] += 1

    if feedback[1] == 0:
      for prod in self.__s_ell:
        self.__T[prod] += 1
      # calculate self._v_ucb
      bar_v = self.__purchases[self.__T != 0]/self.__T[self.__T != 0]
      tmp = 48*math.log(math.sqrt(self.__prod_num)*self.__ell+1) / \
          self.__T[self.__T != 0]
      self.__v_ucb[self.__T != 0] = bar_v + math.sqrt(bar_v*tmp) + tmp
      self.__v_ucb[self.__T == 0] = 1
      self.__ell += 1
      self.__update_epoch = True
